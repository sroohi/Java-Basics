import java.text.NumberFormat;
import java.util.Scanner;

public class mortgageCalculator {
	public static void main(String[] args) {

		int principal = 0;
		float annualInterest = 0;
		byte years = 0;
		int numberOfPayments = 0;
		float monthlyInterest = 0;

		Scanner scn = new Scanner(System.in);
readNumber(principal, 1000, 1000000)
		while (true) {
			System.out.print("Principal:");
			principal = scn.nextInt();

			if (principal >= 1000 && principal <= 1000000)
				break;
			System.out.println("Loan Amount $1k - $1M");
		}

		while (true) {
			System.out.print("Annual Intereset Rate:  ");
			annualInterest = scn.nextFloat();

			if (annualInterest >= 1 && annualInterest <= 30)
				monthlyInterest = annualInterest / percent / Months_in_year;
			break;

			System.out.println("Enter a Number Between 1 and 30");

		}

		while (true) {
			System.out.println("Period : ");
			years = scn.nextByte();
			numberOfPayments = years * Months_in_year;
			if (years >= 1 && years <= 30)
				break;

			System.out.println("Enter a Number Between 1 and 30");
		}
		double mortgage = calculateMortgage(principal, annualInteres, years);

		String mortgageFormatted = NumberFormat.getCurrencyInstance().format(mortgae);
		System.out.print("Mortgage :" + mortgageFormatted);

	}

	public static double calculateMortgage(int principal, float annualInteres, byte years) {

		final byte Months_in_year = 12;
		final byte percent = 100;

		float monthlyInterest = annualInteres / percent / Months_in_year;
		short numberOfPayments = (short) (years * Months_in_year);
		double mortgae = principal * (monthlyInterest * Math.pow(1 + monthlyInterest, numberOfPayments)
				/ (Math.pow(1 + monthlyInterest, numberOfPayments) - 1));
		return mortgae;
	}

	public static double readNumber(String prompt, double min, double max) {
		Scanner scanner = new Scanner(System.in);
		double value;
		while (true) {
			System.out.print(prompt);
			value = scanner.nextFloat();

			if (value >= min && value <= max)
				break;

			System.out.println("Enter a Number Between" + min + "&" + max);

		}
		return value;

	}

}
